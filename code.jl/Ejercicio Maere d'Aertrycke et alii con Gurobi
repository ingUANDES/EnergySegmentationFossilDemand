{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNVY7l6m3KD4AW0nbTJ00yS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "julia-1.6",
      "display_name": "Julia 1.6.2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ingUANDES/EnergySegmentationFossilDemand/blob/master/code.jl/Ejercicio%20Maere%20d'Aertrycke%20et%20alii%20con%20Gurobi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este apunte computa el ejemplo 3.3.1 de @daertrycke_risk_2017 donde se tiene un productor neutral al riesgo que resuelve\n",
        "\n",
        "$$\\min_{x,Y}I\\cdot x+\\tau\\mathbb{E}_{\\Theta}\\left[(C-P_\\omega)\\cdot Y_\\omega\\right]\\quad\\text{subject to}\\quad Y_\\omega\\in[0,x]$$\n",
        "\n",
        "y la demanda como resultado de resolver\n",
        "\n",
        "$$\\min_Q\\tau\\mathbb{E}_\\Theta\\left[P_\\omega\\cdot Q_\\omega-U_\\omega(Q_\\omega)\\right]$$\n",
        "\n",
        "donde $U_\\omega(Q_\\omega)=A_\\omega\\cdot Q_\\omega -\\frac{B}{2}\\cdot Q^2_\\omega$\n",
        "\n",
        "\n",
        "Quedando la funcion como:\n",
        "\n",
        "$$\n",
        "\\min_{Q,x} Ix+\\tau E_{\\Theta}[CY_w-A_wQ_w+\\frac{B}{2}Q_w^2] \\quad \\forall w\n",
        "$$\n",
        "\n",
        "Sujeto a:\n",
        "$$\n",
        " Q_w=Y_w\n",
        " $$\n",
        "$$\n",
        "0\\leq Y_w \\leq x\n",
        "$$"
      ],
      "metadata": {
        "id": "5pUII-4rrVzt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import Pkg\n",
        "Pkg.add(\"Gurobi\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        },
        "id": "h1CsEQa8ueY_",
        "outputId": "83954c72-9256-4696-e655-7fa561cec667"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "error",
          "ename": "LoadError",
          "evalue": "ignored",
          "traceback": [
            "ArgumentError: invalid base 10 digit '>' in \">=10\"",
            "",
            "Stacktrace:",
            " [1] tryparse_internal(#unused#::Type{Int64}, s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)",
            "   @ Base ./parse.jl:137",
            " [2] parse(::Type{Int64}, s::SubString{String}; base::Nothing)",
            "   @ Base ./parse.jl:241",
            " [3] parse",
            "   @ ./parse.jl:241 [inlined]",
            " [4] Pkg.Types.VersionBound(s::SubString{String})",
            "   @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/versions.jl:99",
            " [5] Pkg.Types.VersionRange(s::String)",
            "   @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/versions.jl:145",
            " [6] VersionSpec",
            "   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/versions.jl:227 [inlined]",
            " [7] #Package#262",
            "   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1586 [inlined]",
            " [8] top-level scope",
            "   @ In[21]:2"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Pkg.add(\"JuMP\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2FafGl-Oxzzv",
        "outputId": "24c14b48-9d6b-4b87-a794-c2c292e3c1a7"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m\u001b[1m   Resolving\u001b[22m\u001b[39m package versions...\n",
            "\u001b[32m\u001b[1m  No Changes\u001b[22m\u001b[39m to `~/.julia/environments/v1.6/Project.toml`\n",
            "\u001b[32m\u001b[1m  No Changes\u001b[22m\u001b[39m to `~/.julia/environments/v1.6/Manifest.toml`\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "using JuMP,Gurobi\n",
        "A=[300,350,400,450,500];\n",
        "theta=[0.2,0.2,0.2,0.2,0.2];\n",
        "B=1;\n",
        "I=90;\n",
        "C=60;\n",
        "tau=8760;\n",
        "\n",
        "\n",
        "model=Model(Gurobi.Optimizer)\n",
        "\n",
        "#Variables\n",
        "@variable(model, x>=0)  #Capacidad\n",
        "@variable(model, Y[i in 1:5]>=0) # Produccion en escenario w\n",
        "@variable(model,Q[i in 1:5]>=0) # Demanda en escenario w\n",
        "\n",
        "#Restricciones\n",
        "@constraint(model, demanda[i in 1:5], Y[i] == Q[i] )\n",
        "@constraint(model, capacidad[i in 1:5], Y[i]-x<=0.0)\n",
        "\n",
        "#FO\n",
        "@objective(model, Min, I*1000*x + tau*(sum(theta[i]*(C*Y[i] - A[i]*Q[i] + B*0.5*(Q[i]^2)) for i in 1:5) ))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "L37KhV-rtATN",
        "outputId": "42141085-f26b-4eb0-91a0-53e1a08db9d6"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "error",
          "ename": "LoadError",
          "evalue": "ignored",
          "traceback": [
            "Gurobi Error 10009: No Gurobi license found (user root, host 9571d2a9d9b2, hostid ac1c000c, cores 1)",
            "",
            "Stacktrace:",
            "  [1] _check_ret",
            "    @ ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:400 [inlined]",
            "  [2] Gurobi.Env(; output_flag::Int64, memory_limit::Nothing, started::Bool)",
            "    @ Gurobi ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:129",
            "  [3] Env",
            "    @ ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:107 [inlined]",
            "  [4] Gurobi.Optimizer(env::Nothing; enable_interrupts::Bool)",
            "    @ Gurobi ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:331",
            "  [5] Optimizer (repeats 2 times)",
            "    @ ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:329 [inlined]",
            "  [6] _instantiate_and_check(optimizer_constructor::Any)",
            "    @ MathOptInterface ~/.julia/packages/MathOptInterface/LQvlf/src/instantiate.jl:94",
            "  [7] instantiate(optimizer_constructor::Any; with_bridge_type::Type{Float64}, with_cache_type::Nothing)",
            "    @ MathOptInterface ~/.julia/packages/MathOptInterface/LQvlf/src/instantiate.jl:175",
            "  [8] set_optimizer(model::Model, optimizer_constructor::Any; add_bridges::Bool)",
            "    @ JuMP ~/.julia/packages/JuMP/mvUVO/src/optimizer_interface.jl:365",
            "  [9] Model(optimizer_factory::Type; add_bridges::Bool)",
            "    @ JuMP ~/.julia/packages/JuMP/mvUVO/src/JuMP.jl:182",
            " [10] Model(optimizer_factory::Type)",
            "    @ JuMP ~/.julia/packages/JuMP/mvUVO/src/JuMP.jl:178",
            " [11] top-level scope",
            "    @ In[20]:10"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Resolver\n",
        "JuMP.optimize!(model)\n",
        "\n",
        "\n",
        "\n",
        "println(\"Q = \", JuMP.value.(Q))\n",
        "Qlist=JuMP.value.(Q)\n",
        "\n",
        "j=1\n",
        "P=[]\n",
        "while j<6\n",
        "    Pi=A[j]-B*Qlist[j]\n",
        "    append!(P, Pi)\n",
        "    j=j+1\n",
        "end\n",
        "println(\"P = \",P)\n",
        "println(\"x = \", JuMP.value(x))"
      ],
      "metadata": {
        "id": "bAAW2vxctExt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se tiene ahora el modelo adaptado hacia la transicion energetica.\n",
        "$$\n",
        "\\min_{Q,Y,x1,x2,T} I_1(x_1) + I_2(x_2) + \\tau E_{\\Theta}\\left[(C+CT_w - S_w)Y_w - A_wQ_w + \\frac{B}{2}Q_w^2 \\right]  \\quad\n",
        "$$\n",
        "\n",
        "Sujeto a las siguientes restricci칩nes:\n",
        "$$\n",
        "Q_w = Y_w \\quad \\forall w\n",
        "$$\n",
        "$$\n",
        "0 \\leq Y_w \\leq x_1 + x_2 \\quad \\forall w\n",
        "$$\n",
        "$$\n",
        "0 \\leq T_w \\leq T_{w+1} \\quad \\text{con } w = 1, 2, \\ldots, 5\n",
        "$$\n",
        "$$\n",
        "0 \\leq \\alpha \\leq 1 \\quad\n",
        "$$\n",
        "\n"
      ],
      "metadata": {
        "id": "mII2AWxR3SIo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "using JuMP, Gurobi\n",
        "\n",
        "# Par치metros iniciales\n",
        "A = [300, 350, 400, 450, 500]\n",
        "theta = [0.2, 0.2, 0.2, 0.2, 0.2]\n",
        "B = 1\n",
        "I = 90\n",
        "C = 60\n",
        "tau = 8760\n",
        "s = 80\n",
        "c = 60\n",
        "alpha = 0.7\n",
        "\n",
        "# Modelo\n",
        "model = Model(Gurobi.Optimizer)\n",
        "\n",
        "set_optimizer_attribute(model, \"NonConvex\", 2)\n",
        "\n",
        "# Variables\n",
        "@variable(model, x >= 0)  # Capacidad\n",
        "@variable(model, Y[i in 1:5] >= 0) # Producci칩n en escenario w\n",
        "@variable(model, Q[i in 1:5] >= 0) # Demanda en escenario w\n",
        "@variable(model, 0 <= T[i in 1:5] <= 1) # Transici칩n en escenario w\n",
        "\n",
        "# Restricciones\n",
        "@constraint(model, demanda[i in 1:5], Y[i] == Q[i])\n",
        "@constraint(model, capacidad[i in 1:5], Y[i] - x <= 0.0)\n",
        "@constraint(model, transicion[i in 2:5], T[i] >= T[i-1])\n",
        "@constraint(model, incremento[i in 2:5], T[i] - T[i-1] <= 0.2)\n",
        "@constraint(model, T[1] == 0)\n",
        "\n",
        "\n",
        "\n",
        "S = [s * T[i] for i in 1:5]\n",
        "CT = [c * T[i] * (1 - alpha) for i in 1:5]\n",
        "\n",
        "# Funci칩n objetivo\n",
        "@objective(model, Min, I*1000*x + tau*(sum(theta[i]*( (C + CT[i] - S[i]) * Y[i] - A[i]*Q[i] + B*0.5*(Q[i]^2)) for i in 1:5)))\n",
        "\n",
        "# Resolver\n",
        "JuMP.optimize!(model)\n",
        "\n",
        "# Resultados\n",
        "println(\"Q = \", JuMP.value.(Q))\n",
        "println(\"T = \", JuMP.value.(T))\n",
        "println(\"x = \", JuMP.value(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "R5Jafpn73RwA",
        "outputId": "82572598-dd8b-489c-c4cc-6543a7b8cfe1"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "error",
          "ename": "LoadError",
          "evalue": "ignored",
          "traceback": [
            "Gurobi Error 10009: No Gurobi license found (user root, host 9571d2a9d9b2, hostid ac1c000c, cores 1)",
            "",
            "Stacktrace:",
            "  [1] _check_ret",
            "    @ ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:400 [inlined]",
            "  [2] Gurobi.Env(; output_flag::Int64, memory_limit::Nothing, started::Bool)",
            "    @ Gurobi ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:129",
            "  [3] Env",
            "    @ ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:107 [inlined]",
            "  [4] Gurobi.Optimizer(env::Nothing; enable_interrupts::Bool)",
            "    @ Gurobi ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:331",
            "  [5] Optimizer (repeats 2 times)",
            "    @ ~/.julia/packages/Gurobi/vStLK/src/MOI_wrapper/MOI_wrapper.jl:329 [inlined]",
            "  [6] _instantiate_and_check(optimizer_constructor::Any)",
            "    @ MathOptInterface ~/.julia/packages/MathOptInterface/LQvlf/src/instantiate.jl:94",
            "  [7] instantiate(optimizer_constructor::Any; with_bridge_type::Type{Float64}, with_cache_type::Nothing)",
            "    @ MathOptInterface ~/.julia/packages/MathOptInterface/LQvlf/src/instantiate.jl:175",
            "  [8] set_optimizer(model::Model, optimizer_constructor::Any; add_bridges::Bool)",
            "    @ JuMP ~/.julia/packages/JuMP/mvUVO/src/optimizer_interface.jl:365",
            "  [9] Model(optimizer_factory::Type; add_bridges::Bool)",
            "    @ JuMP ~/.julia/packages/JuMP/mvUVO/src/JuMP.jl:182",
            " [10] Model(optimizer_factory::Type)",
            "    @ JuMP ~/.julia/packages/JuMP/mvUVO/src/JuMP.jl:178",
            " [11] top-level scope",
            "    @ In[13]:15"
          ]
        }
      ]
    }
  ]
}