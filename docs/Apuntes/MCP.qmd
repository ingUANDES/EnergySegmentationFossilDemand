---
title: "MCP"
format: html
editor: visual
jupyter: julia-1.9
bibliography: references.bib
---

## Propósito

Modelar y computar soluciones de un modelo de inversión en capacidad utilizando como lenguaje Julia y como librerías [JuMP](https://github.com/jump-dev/JuMP.jl), [Complementarity](https://github.com/chkwon/Complementarity.jl) y/o [BilevelJuMP](https://github.com/joaquimg/BilevelJuMP.jl).

-   [ ] Incluir referencia/tutorial [PATHSolver](https://github.com/chkwon/PATHSolver.jl)

## Equilibrio de mercados como introducción

-   Tienes una cierta cantidad de productores, digamos $n$

-   Cada productor define su oferta resolviendo un problema de optimización que típicamente mínimiza costos, $\phi$, o maximiza beneficios o utilidad, $\pi$.

    -   Para un precio de venta dado, $p$, el problema a resolver por cada productor en función de una cantidad a ofrecer $q$ es $\min_{q\in[q_0,\bar q]}\phi(p,q)$.[^1]

    -   Si el productor $i$ resuelve su problema tiene una oferta óptima denotada por $q_i^*(p)$

-   Existe una demanda que asumiremos dada (fija) por el momento igual a $\bar D$

-   Entonces en equilibrio de mercado, para el precio de equilibrio $p^*$, requerimos tener lo siguiente $$\sum_{i=1}^{n}q_i^*(p^*)=\bar D$$

-   Subyacente a esto se agrega un $n+1$ problema de optimización de un agente ficticio "de mercado" que la literatura le llama subastador Walrasiano o "la mano invisible". Este agente es "alguien" que resuelve el equilbrio, es decir, iguala oferta con demanda eligiendo un precio. Eso en términos de optimización equivaldría a $$\min_{p\in\Delta}p\cdot\left(\bar D-\sum_{i=1}^nq_i^*(p)\right).$$

[^1]: Para problemas de inversión en capacidad el $\bar q$ depende de la variable de inversión en capacidad que denotamos $x$. Esto implica que la función de costos depende de una nueva variable: $\phi_I(q,x)$

## Problemas de Complementaridad Mixta (MCP)

Los Problemas de Complementaridad Mixta (MCP, por sus siglas en inglés Mixed Complementarity Problem) son una generalización de los problemas de programación lineal y los problemas de complementaridad lineal. Estos problemas permiten modelar una amplia variedad de aplicaciones en economía, ingeniería y otras áreas.

### Formulación matemática

Dado un vector de funciones \( F: \mathbb{R}^n \to \mathbb{R}^n \) y dos vectores \( l, u \in \mathbb{R}^n \) que representan los límites inferior y superior, respectivamente, un MCP busca un vector \( x \) que cumpla:

1. \( l \leq x \leq u \)
2. \( 0 \leq F(x) \perp (x - l) \geq 0 \)
3. \( 0 \leq (u - x) \perp F(x) \geq 0 \)

La notación "⊥" representa la complementariedad entre dos vectores. Para cada componente \( i \):

- Si \( F_i(x) > 0 \), entonces \( x_i = l_i \)
- Si \( F_i(x) < 0 \), entonces \( x_i = u_i \)
- Si \( F_i(x) = 0 \), entonces \( l_i \leq x_i \leq u_i \)

### Interpretación

La esencia de un MCP es la relación de complementariedad. En términos económicos, esto podría interpretarse como: si un mercado tiene exceso de oferta (por ejemplo, \( F(x) > 0 \)), entonces el precio está en su límite inferior (por ejemplo, un precio de cero). Si hay exceso de demanda (\( F(x) < 0 \)), el precio está en su límite superior. Si el mercado está en equilibrio (\( F(x) = 0 \)), el precio puede estar en cualquier lugar entre sus límites.

Los MCPs son especialmente útiles porque permiten modelar equilibrios en sistemas con fricciones o restricciones de una manera más general que los modelos de programación lineal o no lineal tradicionales.

### Aplicaciones

Los MCPs se han utilizado en una variedad de aplicaciones, que incluyen:

- Modelos de equilibrio general en economía.
- Modelos de juegos con equilibrios de Nash.
- Modelos de tráfico en redes de transporte.

### Ejemplo de mercados

Supongamos que $x=p$ y que $F(x)=\bar D-\sum_{i=1}^nq_i^*(x)$.

### Ejemplo de transportes

-   [ ] Explicar [transmcp.jl](https://github.com/chkwon/Complementarity.jl/blob/master/examples/mcp/transmcp.jl) en base a Capítulo 3.3 de @dantzig1991

### Ejemplo de inversión en capacidad

Esta es una resolución del ejemplo de equilibrio competitivo en capacidad con neutralidad al riesgo 3.3.1 de @demaeredaertrycke2017 siguiendo [el tutorial](https://jump.dev/JuMP.jl/stable/tutorials/nonlinear/complementarity/#Electricity-consumption) de [Oscar Dowson](https://github.com/odow). La parametrización del ejemplo es la siguiente:

```{julia}
using JuMP
import PATHSolver
I = 90_000                     # Annualized capital cost
C = 60                         # Operation cost per MWh
τ = 8_760                      # Hours per year
θ = [0.2, 0.2, 0.2, 0.2, 0.2]  # Scenario probabilities
A = [300, 350, 400, 450, 500]  # Utility function coefficients
B = 1                          # Utility function coefficients
```

Iniciamos la configuración del problema con las variables:

```{julia}
model = Model(PATHSolver.Optimizer)
set_silent(model)
@variable(model, x >= 0, start = 1)           # Installed capacity
@variable(model, Q[ω = 1:5] >= 0, start = 1)  # Consumption
@variable(model, Y[ω = 1:5] >= 0, start = 1)  # Production
@variable(model, P[ω = 1:5], start = 1)       # Electricity price
@variable(model, μ[ω = 1:5] >= 0, start = 1)  # Capital scarcity margin
```

La variable $x$ no debería tener un índice por tecnología como si lo tiene [la propuesta](https://discourse.julialang.org/t/complementarity-jl-whit-path/103081/7) original de abordarlo de [Oscar Dowson](https://github.com/odow) que fue corregida en [el tutorial](https://jump.dev/JuMP.jl/stable/tutorials/nonlinear/complementarity/#Electricity-consumption).

Luego definimos las restricciones:

```{julia}
# Unit investment cost equals annualized scarcity profit or investment is 0
@constraint(model, I - τ * θ' * μ ⟂ x)
# Difference between price and scarcity margin is equal to operation cost
@constraint(model, [ω = 1:5], C - (P[ω] - μ[ω]) ⟂ Y[ω])
# Price is equal to consumer's marginal utility
@constraint(model, [ω = 1:5], P[ω] - (A[ω] - B * Q[ω]) ⟂ Q[ω])
# Production is equal to consumption
@constraint(model, [ω = 1:5], Y[ω] - Q[ω] ⟂ P[ω])
# Production does not exceed capacity
@constraint(model, [ω = 1:5], x - Y[ω] ⟂ μ[ω])
```

Invocamos la resolución del problema:

```{julia}
optimize!(model)
solution_summary(model)
```

El valor óptimo para $x$ tiene valor para cada tecnología/escenario y no es igual al valor del ejemplo en el artículo que es $389$.

```{julia}
value(x)
```

De la misma forma el valor óptimo de cantidad encontrado es igual al valor esperado óptimo pero no refleja para cada escenario los valores óptimos que deberían ser: $(240,290,340,389,389)$:

```{julia}
value.(Q)
```

```{julia}
value.(P)
```
