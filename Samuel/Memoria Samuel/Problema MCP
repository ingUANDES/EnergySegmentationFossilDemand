{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7486d3a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Este es el ejemplo D’Aertrycke et al. (2017), con el solver de gurobi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "001b75fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import Pkg\n",
    "Pkg.add(\"Gurobi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c53a2bb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "using JuMP,Gurobi\n",
    "A=[300,350,400,450,500];\n",
    "theta=[0.2,0.2,0.2,0.2,0.2];\n",
    "B=1;\n",
    "I=90; \n",
    "C=60;\n",
    "tau=8760;\n",
    "\n",
    "\n",
    "model=Model(Gurobi.Optimizer)\n",
    "\n",
    "#Variables\n",
    "@variable(model, x>=0)  #Capacidad\n",
    "@variable(model, Y[i in 1:5]>=0) # Produccion en escenario w\n",
    "@variable(model,Q[i in 1:5]>=0) # Demanda en escenario w\n",
    "\n",
    "#Restricciones\n",
    "@constraint(model, demanda[i in 1:5], Y[i] == Q[i] )\n",
    "@constraint(model, capacidad[i in 1:5], Y[i]-x<=0.0)\n",
    "\n",
    "#FO\n",
    "@objective(model, Min, I*1000*x + tau*(sum(theta[i]*(C*Y[i] - A[i]*Q[i] + B*0.5*(Q[i]^2)) for i in 1:5) ))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91aa33aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Resolver\n",
    "JuMP.optimize!(model)\n",
    "     \n",
    "\n",
    "\n",
    "println(\"Q = \", JuMP.value.(Q))\n",
    "Qlist=JuMP.value.(Q)\n",
    "     \n",
    "j=1\n",
    "P=[]\n",
    "while j<6\n",
    "    Pi=A[j]-B*Qlist[j]\n",
    "    append!(P, Pi) \n",
    "    j=j+1\n",
    "end\n",
    "println(\"P = \",P)\n",
    "println(\"x = \", JuMP.value(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65175867",
   "metadata": {},
   "outputs": [],
   "source": [
    "Ahora vamos a ver lo que es el computo del mismo ejemplo, pero con el solver de Ipopt.jl."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7064a247",
   "metadata": {},
   "outputs": [],
   "source": [
    "import Pkg\n",
    "Pkg.add(\"Ipopt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c862d62",
   "metadata": {},
   "outputs": [],
   "source": [
    "using JuMP, Ipopt\n",
    "A = [300, 350, 400, 450, 500]\n",
    "theta = [0.2, 0.2, 0.2, 0.2, 0.2]\n",
    "B = 1\n",
    "I = 90\n",
    "C = 60\n",
    "tau = 8760\n",
    "\n",
    "model = Model(Ipopt.Optimizer)\n",
    "\n",
    "# Variables\n",
    "@variable(model, x >= 0)  # Capacidad\n",
    "@variable(model, Y[1:5] >= 0) # Producción en escenario w\n",
    "@variable(model, Q[1:5] >= 0) # Demanda en escenario w\n",
    "\n",
    "# Restricciones\n",
    "@constraint(model, demanda[i = 1:5], Y[i] == Q[i])\n",
    "@constraint(model, capacidad[i = 1:5], Y[i] - x <= 0)\n",
    "\n",
    "# Función Objetivo\n",
    "@objective(model, Min, I*1000*x + tau * sum(theta[i] * (C * Y[i] - A[i] * Q[i] + B * 0.5 * Q[i]^2) for i = 1:5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "330eb523",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimize!(model)\n",
    "\n",
    "# Resultados\n",
    "println(\"Q = \", value.(Q))\n",
    "Qlist = value.(Q)\n",
    "\n",
    "j = 1\n",
    "P = []\n",
    "while j < 6\n",
    "    Pi = A[j] - B * Qlist[j]\n",
    "    append!(P, Pi)\n",
    "    j = j + 1\n",
    "end\n",
    "println(\"P = \", P)\n",
    "println(\"x = \", value(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3686a5b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "En lo que estoy teniendo problemas es en poder hacerlo con el solver Path... \n",
    "No se si esta bien pasado a un problema de MCP y tambien no se si este modelo con la f.o. cuadratica se puede resolver como MCP\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a9400ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "using Pkg\n",
    "Pkg.add(\"PATHSolver\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "270f6500",
   "metadata": {},
   "outputs": [],
   "source": [
    "using JuMP, PATHSolver\n",
    "\n",
    "# Configurar licencia para PATH\n",
    "PATHSolver.c_api_License_SetString(\"2830898829&Courtesy&&&USR&45321&5_1_2021&1000&PATH&GEN&31_12_2025&0_0_0&6000&0_0\")\n",
    "\n",
    "function modeloRNcompetitivecapacityequilibrium(cant_esce, a, theta, B, tau, c, I)\n",
    "    model = Model(PATHSolver.Optimizer)\n",
    "    \n",
    "    # Decision variables x, Y, Q\n",
    "    @variable(model, x >= 0)  # Capacidad\n",
    "    @variable(model, Y[1:cant_esce], Int)\n",
    "    @variable(model, Q[1:cant_esce], Int)\n",
    "    \n",
    "    # Restricciones\n",
    "    for i in 1:cant_esce\n",
    "        @constraint(model, Y[i] == Q[i])\n",
    "        @constraint(model, Y[i] <= x)\n",
    "    end\n",
    "    \n",
    "    # F.O\n",
    "    @NLobjective(model, Min, I * 1000 * x + tau * sum(theta[i] * (c * Y[i] - a[i] * Q[i] + (B / 2) * (Q[i] * Q[i])) for i in 1:cant_esce))\n",
    "    \n",
    "    optimize!(model)\n",
    "    \n",
    "    P = []\n",
    "    IM = []\n",
    "    for i in 1:cant_esce\n",
    "        push!(P, a[i] - B * value(Q[i]))\n",
    "        push!(IM, (tau * (P[i] - c) * value(Y[i]) - I * value(x)) / value(x))\n",
    "    end\n",
    "    \n",
    "    Qprom = sum(value(Q[i]) for i in 1:cant_esce)\n",
    "    \n",
    "    println(\"Q Promedio = \", Qprom / cant_esce)\n",
    "    println(\"x = \", value(x))\n",
    "    println(\"Valor función objetivo = \", objective_value(model))\n",
    "    \n",
    "    println(cant_esce, a, theta, B, tau, c, I)\n",
    "    \n",
    "    println(\"\\nQ, Y, P and Investment Margin values:\")\n",
    "    for i in 1:cant_esce\n",
    "        println(\"Q($i) = \", value(Q[i]), \"    Y($i) = \", value(Y[i]), \"    P($i) = \", P[i], \"    Investment Margin = \", IM[i])\n",
    "    end\n",
    "end\n",
    "\n",
    "cant = 5\n",
    "A = [300, 350, 400, 450, 500]\n",
    "Theta = [0.2, 0.2, 0.2, 0.2, 0.2]\n",
    "B = 1  # $/MWh\n",
    "tau = 8760  # duracion por segmento por hora\n",
    "C = 60  # costo de operacion en $/mWhora\n",
    "I = 90  # capital para gasto\n",
    "\n",
    "modeloRNcompetitivecapacityequilibrium(cant, A, Theta, B, tau, C, I)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d1be907",
   "metadata": {},
   "outputs": [],
   "source": [
    "Pruebo con complementarity.jl pero tampoco me funciona "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3088cdbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "using Pkg\n",
    "Pkg.add(\"Complementarity\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "124fbbfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "using JuMP, PATHSolver, Complementarity\n",
    "\n",
    "function modeloRNcompetitivecapacityequilibrium(cant_esce, a, theta, B, tau, c, I)\n",
    "    model = MCPModel()\n",
    "    \n",
    "    # Decision variables x, Y, Q\n",
    "    @variable(model, x >= 0)  # Capacidad\n",
    "    @variable(model, Y[1:cant_esce] >= 0)\n",
    "    @variable(model, Q[1:cant_esce])\n",
    "    \n",
    "    # Restricciones y condiciones de complementariedad\n",
    "    for i in 1:cant_esce\n",
    "        @constraint(model, Q[i] == Y[i])\n",
    "        @complements(0 <= Y[i], Y[i] <= x)\n",
    "    end\n",
    "    \n",
    "    \n",
    "    resolver = solveMCP(model)\n",
    "    \n",
    "    P = []\n",
    "    IM = []\n",
    "    for i in 1:cant_esce\n",
    "        push!(P, a[i] - B * value(Q[i]))\n",
    "        push!(IM, (tau * (P[i] - c) * value(Y[i]) - I * value(x)) / value(x))\n",
    "    end\n",
    "    \n",
    "    Qprom = sum(value(Q[i]) for i in 1:cant_esce)\n",
    "    \n",
    "    println(\"Q Promedio = \", Qprom / cant_esce)\n",
    "    println(\"x = \", value(x))\n",
    "    \n",
    "    println(cant_esce, a, theta, B, tau, c, I)\n",
    "    \n",
    "    println(\"\\nQ, Y, P and Investment Margin values:\")\n",
    "    for i in 1:cant_esce\n",
    "        println(\"Q($i) = \", value(Q[i]), \"    Y($i) = \", value(Y[i]), \"    P($i) = \", P[i], \"    Investment Margin = \", IM[i])\n",
    "    end\n",
    "end\n",
    "\n",
    "cant = 5\n",
    "A = [300, 350, 400, 450, 500]\n",
    "Theta = [0.2, 0.2, 0.2, 0.2, 0.2]\n",
    "B = 1  # $/MWh\n",
    "tau = 8760  # duracion por segmento por hora\n",
    "C = 60  # costo de operacion en $/mWhora\n",
    "I = 90  # capital para gasto\n",
    "\n",
    "modeloRNcompetitivecapacityequilibrium(cant, A, Theta, B, tau, C, I)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.9.2",
   "language": "julia",
   "name": "julia-1.9"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
